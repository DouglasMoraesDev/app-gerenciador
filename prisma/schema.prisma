datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Papel {
  ADMIN
  OPERADOR
  MECANICO
}

enum StatusOS {
  PENDENTE
  EM_ANDAMENTO
  PRONTO
  ENTREGUE
}

enum TipoMov {
  ENTRADA
  SAIDA
}

enum ModalidadePagamento {
  PIX
  CARTAO
  DINHEIRO
}

model Usuario {
  id       Int      @id @default(autoincrement())
  nome     String
  email    String   @unique
  senha    String
  papel    Papel    @default(OPERADOR)
  criadoEm DateTime @default(now())

  caixas        Caixa[]        @relation("UsuarioCaixas")
  movs          CaixaMov[]
  osFinalizadas OrdemServico[] @relation("UsuarioFinalizacao")
  gastos        Gasto[]
}

model Servico {
  id        Int      @id @default(autoincrement())
  nome      String   @unique
  descricao String
  valor     Float
  criadoEm  DateTime @default(now())

  itens OrdemServicoItem[]
}

model OrdemServico {
  id               Int      @id @default(autoincrement())
  placa            String   @db.VarChar(20)
  modelo           String   @db.VarChar(100)
  descricaoServico String
  valorServico     Float
  status           StatusOS @default(PENDENTE)
  criadoEm         DateTime @default(now())
  atualizadoEm     DateTime @updatedAt

  finalizadoPor   Usuario? @relation("UsuarioFinalizacao", fields: [finalizadoPorId], references: [id])
  finalizadoPorId Int?

  modalidadePagamento ModalidadePagamento?

  movCaixa   CaixaMov? @relation("OScaixa", fields: [movCaixaId], references: [id])
  movCaixaId Int?      @unique

  parceiro   EmpresaParceira? @relation(fields: [parceiroId], references: [id])
  parceiroId Int?

  itens OrdemServicoItem[]
}

model OrdemServicoItem {
  id                  Int     @id @default(autoincrement())
  ordemServicoId      Int
  servicoId           Int
  valorServico        Float
  modalidadePagamento String? @db.VarChar(20)

  ordemServico OrdemServico @relation(fields: [ordemServicoId], references: [id])
  servico      Servico      @relation(fields: [servicoId], references: [id])
}

model Caixa {
  id             Int       @id @default(autoincrement())
  dataAbertura   DateTime
  dataFechamento DateTime?
  saldoInicial   Float
  saldoFinal     Float?
  entradas       Float     @default(0)
  saidas         Float     @default(0)

  usuario   Usuario @relation("UsuarioCaixas", fields: [usuarioId], references: [id])
  usuarioId Int

  movimentacoes CaixaMov[]
}

model CaixaMov {
  id        Int      @id @default(autoincrement())
  tipo      TipoMov
  valor     Float
  createdAt DateTime @default(now())

  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId Int

  caixa   Caixa @relation(fields: [caixaId], references: [id])
  caixaId Int

  ordem   OrdemServico? @relation("OScaixa")
  ordemId Int?

  gasto   Gasto? @relation("GastoCaixa")
  gastoId Int?
}

model Gasto {
  id        Int      @id @default(autoincrement())
  descricao String
  valor     Float
  data      DateTime @default(now())

  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId Int

  movCaixa   CaixaMov? @relation("GastoCaixa", fields: [movCaixaId], references: [id])
  movCaixaId Int?      @unique
}


model EmpresaParceira {
  id          Int      @id @default(autoincrement())
  nome        String
  cnpj        String   @unique
  descricao   String
  valorMensal Float
  contratoUrl String?
  criadoEm    DateTime @default(now())

  ordens OrdemServico[]
}
